package com.alipay.shop.geektime.chapter34;

import com.ctrip.framework.apollo.core.utils.StringUtils;
import com.google.common.annotations.VisibleForTesting;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Random;
import lombok.extern.slf4j.Slf4j;
import org.junit.Assert;
import org.junit.Test;

/**
 * @author hyy
 * @Description
 * @create 2024-04-12 00:18
 */
@Slf4j
public class v3 {
    //自定义异常类
    static class IdGenerationFailureException extends RuntimeException {
        public IdGenerationFailureException(String message, Throwable cause) {
            super(message, cause);
        }
    }

    interface IdGenerator {
        String generate();
    }

    interface LogTraceIdGenerator extends v1.IdGenerator {

    }

    /**
     * Id Generator that is used to generate random IDs.
     *
     * <p>
     * The IDs generated by this class are not absolutely unique,
     * but the probability of duplication is very low.
     */
    public class RandomIdGenerator implements IdGenerator {

        /**
         * Generate the random ID. The IDs may be duplicated only in extreme situation.
         *
         * @return an random ID
         */
        @Override
        public String generate() throws IdGenerationFailureException {
            String substrOfHostName = null;
            try {
                substrOfHostName = getLastFieldOfHostName();
            } catch (UnknownHostException e) {
                throw new IdGenerationFailureException("...", e);
            }
            long currentTimeMillis = System.currentTimeMillis();
            String randomString = generateRandomAlphameric(8);
            return String.format("%s-%d-%s", substrOfHostName, currentTimeMillis, randomString);
        }

        /**
         * Get the local hostname and
         * extract the last field of the name string splitted by delimiter '.'.
         *
         * @return the last field of hostname. Returns null if hostname is not obtained.
         */
        private String getLastFieldOfHostName() throws UnknownHostException {
            String substrOfHostName = null;
            String hostName = InetAddress.getLocalHost().getHostName();
            if (StringUtils.isBlank(hostName)) {
                throw new UnknownHostException("...");
            }
            substrOfHostName = getLastSubstrSplittedByDot(hostName);
            return substrOfHostName;
        }

        /**
         * Get the last field of {@hostName} splitted by delemiter '.'.
         *
         * @param hostName should not be null
         * @return the last field of {@hostName}. Returns empty string if {@hostName} is empty string.
         */
        @VisibleForTesting
        protected String getLastSubstrSplittedByDot(String hostName) {
            if (StringUtils.isBlank(hostName)) {
                throw new IllegalArgumentException("...");
            }
            String[] tokens = hostName.split("\\.");
            return tokens[tokens.length - 1];
        }

        /**
         * Generate random string which
         * only contains digits, uppercase letters and lowercase letters.
         *
         * @param length should not be less than 0
         * @return the random string. Returns empty string if {@length} is 0
         */
        @VisibleForTesting
        protected String generateRandomAlphameric(int length) {
            if (length <= 0) {
                throw new IllegalArgumentException("...");
            }
            char[] randomChars = new char[length];
            int count = 0;
            Random random = new Random();
            while (count < length) {
                int maxAscii = 'z';
                int randomAscii = random.nextInt(maxAscii);
                boolean isDigit = randomAscii >= '0' && randomAscii <= '9';
                boolean isUppercase = randomAscii >= 'A' && randomAscii <= 'Z';
                boolean isLowercase = randomAscii >= 'a' && randomAscii <= 'z';
                if (isDigit || isUppercase || isLowercase) {
                    randomChars[count] = (char) (randomAscii);
                    ++count;
                }
            }
            return new String(randomChars);
        }
    }

    @Test
    public void testGetLastSubstrSplittedByDot() {
        RandomIdGenerator idGenerator = new RandomIdGenerator();
        String actualSubstr = idGenerator.getLastSubstrSplittedByDot("field1.field2.field3");
        Assert.assertEquals("field3", actualSubstr);
        actualSubstr = idGenerator.getLastSubstrSplittedByDot("field1");
        Assert.assertEquals("field1", actualSubstr);
        actualSubstr = idGenerator.getLastSubstrSplittedByDot("field1#field2#field3");
        Assert.assertEquals("field1#field2#field3", actualSubstr);
    }

    @Test
    public void testGetLastSubstrSplittedByDot_nullOrEmpty() {
        RandomIdGenerator idGenerator = new RandomIdGenerator();
        String actualSubstr = idGenerator.getLastSubstrSplittedByDot(null);
        Assert.assertNull(actualSubstr);
        actualSubstr = idGenerator.getLastSubstrSplittedByDot("");
        Assert.assertEquals("", actualSubstr);
    }

    @Test
    public void testGenerateRandomAlphameric() {
        RandomIdGenerator idGenerator = new RandomIdGenerator();
        String actualRandomString = idGenerator.generateRandomAlphameric(6);
        Assert.assertNotNull(actualRandomString);
        Assert.assertEquals(6, actualRandomString.length());
        for (char c : actualRandomString.toCharArray()) {
            Assert.assertTrue(('0' <= c && c <= '9') || ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z'));
        }
    }

    @Test
    public void testGenerateRandomAlphameric_lengthEqualsOrLessThanZero() {
        RandomIdGenerator idGenerator = new RandomIdGenerator();
        String actualRandomString = idGenerator.generateRandomAlphameric(0);
        Assert.assertEquals("", actualRandomString);
        actualRandomString = idGenerator.generateRandomAlphameric(-1);
        Assert.assertNull(actualRandomString);
    }
}